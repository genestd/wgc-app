type User @model {
  id: ID!
  screenName: String
  email: String
  bio: String
  avatar: String
  events: [EventUsers] @connection(name: "EventUser", keyName: "byUser", fields: ["id"])
  teams: [TeamUser]  @connection(name: "TeamUser", keyName: "byUser", fields: ["id"])
}

type Team @model {
  id: ID!
  name: String
  avatar: String
  users: [TeamUser]  @connection(name: "TeamUser", keyName: "byTeam", fields: ["id"])
  events: [EventTeam] @connection(name: "EventTeam", keyName: "byTeam", fields: ["id"])
}

type Event @model {
  id: ID!
  name: String
  description: String
  tagline: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  location: String
  primaryImage: String
  secondaryImage: String
  registrationType: RegistrationType
  registeredUsers: [EventUsers] @connection(name: "EventUser", keyName: "byEvent", fields: ["id"])
  invitedUsers: [String]
  teams: [EventTeam]  @connection(name: "EventTeam", keyName: "byEvent", fields: ["id"])
  games: [Game]
}

type EventUsers
  @model
  @key(fields: ["eventId", "userId"])
  @key(name: "byEvent", fields: ["eventId", "userId"])
  @key(name: "byUser", fields: ["userId", "eventId"]) {
  id: ID!
  eventId: ID!
  userId: ID!
  event: Event! @connection(fields: ["eventId"])
  user: User! @connection(fields: ["userId"])
}

type TeamUser
@model
@key(name: "byUser", fields: ["userId", "teamId"])
@key(name: "byTeam", fields: ["teamId", "userId"]) {
  id: ID!
  userId: ID!
  teamId: ID!
  team: Team! @connection(fields: ["teamId"])
  user: User! @connection(fields: ["userId"])
}

type EventTeam
  @model
  @key(name: "byEvent", fields: ["eventId", "teamId"])
  @key(name: "byTeam", fields: ["teamId", "eventId"]) {
  id: ID!
  eventId: ID!
  teamId: ID!
  event: Event! @connection(fields: ["eventId"])
  team: Team! @connection(fields: ["teamId"])
}

type Game {
  name: String!
  bracketType: BracketType!
  scoringMethod: ScoringMethod!
  pointsToWin: Int
  eliminationType: EliminationType
  rules: String
  bracket: [Match]
}

type Match {
  id: ID!
  homeTeam: Team!
  awayTeam: Team!
  status: MatchStatus
  results: [Result]
}

type Result {
  homeTeamScore: Int
  awayTeamScore: Int
  gameStatuss: MatchStatus
}

enum RegistrationType {
  PUBLIC
  PRIVATE
}

enum ScoringMethod {
  HEAD_TO_HEAD
  TEAM_TOTAL
}

enum BracketType {
  ROUND_ROBIN
}

enum EliminationType {
  SINGLE_ELIMINATION
  BEST_OF_THREE
}

enum MatchStatus {
  NOT_STARTED
  ON_THE_CLOCK
  IN_PROGRESS
  FINAL
}